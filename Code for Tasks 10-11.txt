# TASK 10: Generating Postoperative BSCVA (1 year) values
# Range from 0.00 to 1.30 LogMAR, mean 0.40 LogMAR
complete_patients_df['Postoperative BSCVA'] = np.round(np.random.normal(0.40, 0.3, len(complete_patients_df)), 1)
complete_patients_df['Postoperative BSCVA'] = complete_patients_df['Postoperative BSCVA'].clip(0.0, 1.3)

# Ensuring Postoperative BSCVA is significantly lower than Preoperative BSCVA
# Conducting a t-test
post_pre_bscva_ttest = stats.ttest_rel(
    complete_patients_df['Postoperative BSCVA'],
    complete_patients_df['Preoperative BSCVA']
)
post_pre_bscva_ttest_pvalue = post_pre_bscva_ttest.pvalue

# TASK 11: Generating Postoperative Topographic Cylinder (1 year) values
# Range 0.50-12.0 D, mean 3.0 D
complete_patients_df['Postoperative Topographic Cylinder'] = np.round(np.random.normal(3.0, 1.5, len(complete_patients_df)), 2)
complete_patients_df['Postoperative Topographic Cylinder'] = complete_patients_df['Postoperative Topographic Cylinder'].clip(0.5, 12.0)

# Ensuring Postoperative Topographic Cylinder is significantly lower than Preoperative Topographic Cylinder
post_pre_cylinder_ttest = stats.ttest_rel(
    complete_patients_df['Postoperative Topographic Cylinder'],
    complete_patients_df['Preoperative Topographic Cylinder']
)
post_pre_cylinder_ttest_pvalue = post_pre_cylinder_ttest.pvalue

# Comparing Postoperative BSCVA for DALK and PK treatments
dalk_pk_bscva_ttest = stats.ttest_ind(
    complete_patients_df[complete_patients_df['Treatment'] == 'DALK']['Postoperative BSCVA'],
    complete_patients_df[complete_patients_df['Treatment'] == 'PK']['Postoperative BSCVA']
)
dalk_pk_bscva_ttest_pvalue = dalk_pk_bscva_ttest.pvalue

# Comparing Postoperative Topographic Cylinder for DALK and PK treatments
dalk_pk_cylinder_ttest = stats.ttest_ind(
    complete_patients_df[complete_patients_df['Treatment'] == 'DALK']['Postoperative Topographic Cylinder'],
    complete_patients_df[complete_patients_df['Treatment'] == 'PK']['Postoperative Topographic Cylinder']
)
dalk_pk_cylinder_ttest_pvalue = dalk_pk_cylinder_ttest.pvalue

# Output the p-values
post_pre_bscva_ttest_pvalue, post_pre_cylinder_ttest_pvalue, dalk_pk_bscva_ttest_pvalue, dalk_pk_cylinder_ttest_pvalue

# Code from "Code for ChiSquare Test.txt" for calculating the final last digit
def final_last_digit(number):
    number_str = str(number)
    if '.' in number_str:  # If the number is a decimal
        integer_part, decimal_part = number_str.split('.')
        if decimal_part.rstrip('0') == '':  # If decimal part is all zeros
            return int(integer_part[-1])  # Return the last digit of the integer part
        else:
            return int(decimal_part.rstrip('0')[-1])  # Return the last non-zero digit of the decimal part
    else:  # If the number is an integer
        return int(number_str[-1])

# Apply this method to extract the last digit of the Postoperative Topographic Cylinder
complete_patients_df['Postoperative Topographic Cylinder Last Digit'] = complete_patients_df['Postoperative Topographic Cylinder'].apply(final_last_digit)

# Counting the occurrences of each last digit
last_digit_counts = complete_patients_df['Postoperative Topographic Cylinder'].value_counts().sort_index()

# Performing the chi-square test for uniform distribution
chi_square_test_last_digit_custom = chisquare(last_digit_counts)

# Chi-square test p-value
p_value_last_digit_custom = chi_square_test_last_digit_custom.pvalue

# Display the p-value and check if it is greater than 0.05 for uniform distribution
uniform_last_digit_distribution_custom = p_value_last_digit_custom > 0.05
p_value_last_digit_custom, uniform_last_digit_distribution_custom



